---
title: "Advanced R: Names and Values"
subtitle: "Applying R to Lifestyle and Brain Health Research"
author: "Brian C. Helsel, PhD"
institute: "University of Kansas Medical Center"
date: today
format:
  revealjs:
    theme: [default, "../../styles/styleReveal.scss", customReveal.scss]
    slide-number: true
    preview-links: auto
    logo: https://brand.ku.edu/sites/brand/files/styles/wide_col_xl_6/public/images/2020/KUMarksLogo.png
    footer: "R for Lifestyle and Brain Health (R-LAB)"
    transition: slide
    background-transition: fade
    highlight-style: github
    code-line-numbers: true
    code-block-bg: true
    incremental: false
    date-format: long
    embed-resources: true
---

## R as a Language: More Than Just Stats {.title-slide}

::: {.highlight-box}
**R is a language and environment for statistical computing and graphics**

:::

**You will advance your R skills related to:**

- Research Software Engineering
- Building Packages and Reports
- Creating Dashboards and Web Apps

::: notes

This course isnâ€™t about using Râ€™s data analysis tools, but by strengthening your
understanding of R as a programming language, youâ€™ll gain deeper insight into
how those tools workâ€”and how to use them more effectively.

:::


## Getting Started {.pattern-dots}

::: {.columns}
::: {.column width="60%"}
**Installation Requirements:**

- **Base R**: Core language
- **Integrated development environment (IDE)**

::: {.tip-box}
ðŸ’¡ **Tip**: Common Integrated Development Environments Options Include R Studio, Positron, and Visual Studio Code.
:::
:::

::: {.column width="40%"}
**Essential Packages:**

| Package | Purpose |
|---------|---------|
| lobstr | Understanding R Objects |
| tibble | A Modern Data Frame |
| dplyr | Data wrangling |

:::
:::

::: notes

To get started with our lessons, you'll need to have R installed, along with an
integrated development environment (IDE).

Common IDEs include RStudio, Positron, and Visual Studio Code. Each has
different strengths:
â€“ RStudio is popular for R-specific workflows and ease of use
â€“ VS Code is more customizable and good for multi-language projects
â€“ Positron (if you're using it) is a lightweight option for quick scripting

For our first few lessons, make sure you install the following packages:
â€“ lobstr â€“ to explore how R manages objects in memory
â€“ tibble â€“ a modern, tidyverse-friendly version of data frames
â€“ dplyr â€“ for efficient data wrangling and manipulation

Youâ€™ll also want to create a GitHub account and install GitHub Desktop. This
will make it easier to access course materials, track your code, and eventually
build your own R packages or Shiny apps.

:::


## Binding Basics

```{r}
#| echo: true

library(lobstr)
x <- c(1, 2, 3)
obj_addr(x)

```

![](https://adv-r.hadley.nz/diagrams/name-value/binding-1.png){width="35%" .nostretch}


::: {.highlight-box}

Behind the scenes R creates a vector object of values `c(1, 2, 3)` and binds it
to a name `x` with an object address of **`r obj_addr(x)`**.

:::

. . .

```{r}
#| echo: true

# Creates another binding to the same object
y <- x
obj_addr(y)

```

![](https://adv-r.hadley.nz/diagrams/name-value/binding-2.png){width="35%" .nostretch}

## Copy-on-modify

```{r}
#| echo: true

y[[3]] <- 4
obj_addr(y)

```

Modifying `y` creates a new object that is a copy of **`r obj_addr(x)`**
and has a new object address of **`r obj_addr(y)`**.

![](https://adv-r.hadley.nz/diagrams/name-value/binding-3.png){width="35%" .nostretch}

We can see when an object gets copied with `base::tracemem()`

```{r}
#| echo: true
#| eval: false

y <- x
tracemem(x)
y[[3]] <- 4
untracemem(x)

```

```{r}
# echo: false

paste0("<", obj_addr(x), ">")

```

```{r}
# echo: false

paste0("tracemem[", obj_addr(x), " -> ", obj_addr(y), "]:")

```

## Function Calls {.pattern-grid}

The same rules for copying apply to function calls.

```{r}
#| echo: true
#| eval: false

f <- function(a) {
    a
}

tracemem(x)

z <- f(x)

untracemem(x)

```

![](https://adv-r.hadley.nz/diagrams/name-value/binding-f1.png){width="40%" .nostretch}

```{r}
# echo: false

paste0("<", obj_addr(x), ">")

```

Once `f()` completes, `x` and `z` will point to the same object.

![](https://adv-r.hadley.nz/diagrams/name-value/binding-f2.png){width="35%" .nostretch}

```{r}
# echo: false

f <- function(a) {
    a
}

z <- f(x)

paste0("tracemem[", obj_addr(x), " -> ", obj_addr(z), "]:")

```

## Lists

Elements of lists can also point to objects, but copy-on-modify differs from
variables in that a **shallow copy** is created.

```{r}
#| echo: true

l1 <- list(1, 2, 3)

```

A list stores references to the values rather than the values. This is important
to know for understanding what happens when we modify a list.

![](https://adv-r.hadley.nz/diagrams/name-value/list.png){width="40%" .nostretch}

```{r}
#| echo: true

l2 <- l1

```

![](https://adv-r.hadley.nz/diagrams/name-value/l-modify-1.png){width="40%" .nostretch}

```{r}
#| echo: true

l2[[3]] <- 4

```

![](https://adv-r.hadley.nz/diagrams/name-value/l-modify-2.png){width="40%" .nostretch}

Using the `ref()` function from the `lobstr` package shows the shared bindings across `l1` and `l2`.

```{r}
#| echo: true

ref(l1, l2)

```

## Data frames {.pattern-dots}

Data frames are lists of vectors and copy-on-modify works differently for columns and rows.

```{r}
#| echo: true

d1 <- data.frame(x = c(1, 5, 6), y = c(2, 4, 3))

```

**Columns**

Only the modified column is changed.

```{r}
#| echo: true

d2 <- d1
d2[, 2] <- d2[, 2] * 2

```

::: {.columns}
::: {.column width="50%"}
![](https://adv-r.hadley.nz/diagrams/name-value/dataframe.png){width="60%" .nostretch}
:::
::: {.column width="50%"}
![](https://adv-r.hadley.nz/diagrams/name-value/d-modify-c.png){width="70%" .nostretch}
:::
:::

**Rows**

Every column is modified and must be copied.

```{r}
#| echo: true

d3 <- d1
d3[1, ] <- d3[1, ] * 3

```

![](https://adv-r.hadley.nz/diagrams/name-value/d-modify-r.png){width="70%" .nostretch}

## Character Vectors

R uses a **global string pool** where each element in a character vector points to a unique string in the pool.

```{r}
#| echo: true

x <- c("a", "a", "abc", "d")

```

```{r}
#| echo: true
#| eval: false

ref(x, character = TRUE)

```

::: {.columns}
::: {.column}

```{r}
#| echo: false

ref(x, character = TRUE)

```

:::

::: {.column}
![](https://adv-r.hadley.nz/diagrams/name-value/character-2.png){width="80%" .nostretch}

:::
:::

The **global string pool** has an impact on the amount of memory a character
vector uses, but can otherwise be thought of similarly to numeric vectors.

![](https://adv-r.hadley.nz/diagrams/name-value/character.png){width="50%" .nostretch}

## Object Size

Use `lobstr::obj_size` to find out how much memory an object takes.


```{r}
#| echo: true

x <- rnorm(1000, mean = 35, sd = 5)
y <- list(x, x, x)
x_size <- obj_size(x)
y_size <- obj_size(y)

sprintf(
    "y (size: %s B) is only %s B larger than x (size: %s B)",
    y_size,
    y_size - x_size,
    x_size
)

```

::: {.columns}
::: {.column}

The elements of a list are references to the values. Storing `x` three times is the size of an empty list with three `NULL` elements.

:::

::: {.column}

```{r}
#| echo: false

hist(x, breaks = 20, col = "#1f4788")

```

:::
:::


```{r}
#| echo: true

obj_size(list(NULL, NULL, NULL))

```

. . .

#### Character vectors also take up less memory than expected.


```{r}
#| echo: true

fruits <- c("apple", "apple", "apple")

sprintf(
    "Repeating fruit 100 times takes up %s B more in memory",
    obj_size(rep(fruits, 100)) - obj_size(fruits)
)

```

## Object Size for Shared Values

References make it more challenging to think about the size of individual objects.
The object size only equals the combined object size if there are no shared values.

```{r}
#| echo: true
#| eval: false

vegetables <- c("broccoli", "broccoli", "broccoli")
fruits_or_vegetables <- c("apple", "broccoli", "apple")

obj_size(fruits, vegetables)
#> 280 B
obj_size(fruits) + obj_size(vegetables)
#> 280 B
obj_size(fruits, fruits_or_vegetables)
#> 280 B
obj_size(fruits) + obj_size(fruits_or_vegetables)
#> 336 B

```

## Alternative Representation

R has the ability to represent some vectors compactly. For example, using the `:` when
providing a numeric range stores the first and last number only such that every sequence
is always the same size.

```{r}
#| echo: true

print(1:10)

```

```{r}
#| echo: true
#| eval: false

obj_size(1:10)
#> 680 B
obj_size(1:1000)
#> 680 B
obj_size(1:1000000)
#> 680 B

```

## Environments

R environments are modified-in-place rather than copied-on-modify. When you modify an
environment, all existing bindings to that environment continue to have the same reference.


```{r}
#| echo: true
#| eval: false

e1 <- rlang::env(a = 1, b = 2, c = 3)
e2 <- e1

# e2$c changes with the modification of e1$c
e1$c <- 4

print(e2$c)
#>  4

```

::: {.columns}
::: {.column}
![](https://adv-r.hadley.nz/diagrams/name-value/e-modify-1.png){width="70%" .nostretch}
:::
::: {.column}
![](https://adv-r.hadley.nz/diagrams/name-value/e-modify-2.png){width="70%" .nostretch}
:::
:::

## Unbinding and the garbage collector

::: {.columns}
::: {.column}

```{r}
#| echo: true
#| eval: false

# Assigns x to
# numeric object
x <- 1:3

```

![](https://adv-r.hadley.nz/diagrams/name-value/unbinding-1.png){.nostretch}

:::
::: {.column}

```{r}
#| echo: true
#| eval: false

# Reassigns x to new
# numeric object
x <- 2:4

```

![](https://adv-r.hadley.nz/diagrams/name-value/unbinding-2.png){.nostretch}

:::
::: {.column}

```{r}
#| echo: true
#| eval: false

# Unbinds x from
# numeric objects
rm(x)

```

![](https://adv-r.hadley.nz/diagrams/name-value/unbinding-3.png){.nostretch}

:::
:::

After running this code, we have two numeric objects not bound to a name. The
**garbage collector** (GC) frees up memory by deleting R objects that are no
longer used. The garbage collector runs automatically when R needs more memory
to create new objects or manually using the `gc` function. You can also check
the memory used using the `lobstr::mem_used` function.

```{r}
#| echo: true

gc()

mem_used()

```
