---
title: "Basics of R"
subtitle: "A Statistical Computing Environment"
author: "Julianne Clina"
institute: "University of Kansas Medical Center"
date: June 25 2025
format:
  revealjs:
    theme: [default, "../../styles/styleReveal.scss", customReveal.scss]
    slide-number: true
    preview-links: auto
    logo: https://brand.ku.edu/sites/brand/files/styles/wide_col_xl_6/public/images/2020/KUMarksLogo.png
    footer: "R Programming Workshop"
    transition: slide
    background-transition: fade
    highlight-style: github
    code-line-numbers: true
    code-block-bg: true
    incremental: false
    date-format: long
    embed-resources: true
---

## What are R and RStudio? {.title-slide}

**What is R?**

R is a **programming language** for statistical computing and graphics.

**What is RStudio?**  

RStudio is an **Integrated Development Environment (IDE)** — a software that provides a user-friendly interface to write, organize, and run R code more easily.

. . . 

![](https://bradleyboehmke.github.io/uc-bana-7025/images/R_vs_RStudio_1.png)

**Analogy**: R is like a **car engine** and RStudio is like a car **dashboard**. 

## Components of RStudio {.pattern-dots}

::: {.columns}

::: {.column}

| Component | Description |
|-----------|-------------|
| Console | Run R commands directly and view error messages |
| Source | Write, edit, and save scripts or projects |
| Environment | Shows data objects (e.g., variables, data frames) |
| Output | Displays plots and tables.

:::

::: {.column}

![](https://docs.posit.co/ide/user/ide/guide/ui/images/rstudio-panes-labeled.jpeg){.nostretch}

:::

:::

. . .

Additional components and functions:

- **History**: Keeps track of the commands you’ve run.
- **Files**: Manage your project files and folders.  
- **Packages**: Install and load add-ons that extend R’s functionality.  
- **Help**: Access documentation and help files.  
- **Viewer**: Display web content or interactive visualizations within RStudio.
- **Terminal**: A command-line interface where you can run system commands or use other programming languages alongside R.

## Starting a Project in RStudio {.pattern-dots} 

::: {.columns}
::: {.column}
**Starting a Project**

- Keeps files organized by project.  
- Prevents mixing data or scripts from different analyses.  
- Makes sharing and reproducing work easier.

:::
::: {.column}
![](https://bradleyboehmke.github.io/uc-bana-7025/images/new_project.png){.nostretch}
:::
:::

. . .

::: {.columns}

::: {.column} 

**What is the Working Directory?**  

- The folder where R reads and saves files by default.  
- Acts as R’s “home folder” during your session.

:::

::: {.column} 

**Setting the working directory**
![](https://raw.githubusercontent.com/NEONScience/NEON-Data-Skills/main/graphics/r-skills/RStudio-GUI-setWD.png){.nostretch}

:::

::: 

**How the Working Directory Works with Projects**  

- When you start a new project, RStudio sets the working directory to that project’s folder.  
- Any files you create or export are saved there by default.  
- This helps keep all your project files together and easy to find.


## Packages and Functions in R 

**What is a Package?** 

- A set of functions, data, or code designed to accomplish specific tasks  

**What is a Function?** 

- Functions **take input**, **do something**, and **return output**

Think of it like a toolbox. A package is like a toolbox, and a function is a specific tool in the box. 

**Essential `tidyverse` Packages** 

| Package | Purpose | Example Functions |
|---------|---------|---------|
| dplyr | Data wrangling | filter, select, mutate | 
| tidyr | Data organization | pivot_longer, drop_na |
| ggplot2 |Data Visualization | geom_point, facet_wrap | 
| readr | Data Import | read_csv |


## Basics of Using a Function

::: {.columns}
::: {.column}

- In order to use a function, you have to feed it the information it needs to complete its task
- You can use the help function **help(function_name)** or its shortcut **?function_name**. You can also click the "Help" tab.
- Here you read about the package usage, descriptions arguments, details etc. 

:::
::: {.column}

![](https://intro2r.com/images/rs_help.png){.nostretch}

:::
:::





## Making Your Very Own Function! 

- Writing your own functions helps increase efficiency if doing the same task over and over 
- Components of the function are the function name, input, code that explains what you want the function to do, and the output

```{r}
#| echo: true
library(dplyr)

fahrenheit_to_celsius <- function(f_temp) {
  c_temp <- (f_temp - 32) * 5 / 9
  return(c_temp)
}
fahrenheit_to_celsius(98.6)

get_bmi_category <- function(wt, ht) {
  bmi <- wt / ht^2
  category <- case_when(
    bmi < 18.5 ~ "Underweight",
    bmi >= 18.5 & bmi < 24.9 ~ "Normal weight",
    bmi >= 25 & bmi < 29.9 ~ "Overweight",
    bmi >= 30 ~ "Obesity",
  )
  return(paste0("BMI = ", round(bmi, 1), " (", category, ")"))
}
get_bmi_category(85, 1.54)


```

## Package Cheat Sheets

**tidyverse** 

![](https://raw.githubusercontent.com/rstudio/cheatsheets/master/pngs/thumbnails/tidyr-thumbs.png)

**ggplot2**

![](https://rstudio.github.io/cheatsheets/pngs/data-visualization.png)

**dplyr**

![](https://rstudio.github.io/cheatsheets/pngs/data-transformation.png) 


## Updating R Studio and Packages

**Why even bother?**

- Get **new features**, **bug fixes**, and better performance  
- Ensure **compatibility** with newer packages  
- Stay consistent with collaborators and tutorials  

When you open R Studio it will tell you what version you are using 

![](http://mercury.webster.edu/aleshunas/R_learning_infrastructure/images/R%20version%20screen.png)

**Update RStudio**

1. Visit [https://posit.co/download/rstudio/](https://posit.co/download/rstudio/)
2. Choose your operating system (Windows or Mac)
3. Download and install the latest version

. . . 

**Update Your Packages**

Updated packages makes sure you are working with the latest versions which can include fixes of old bugs.
Occasionally, if in the middle of an analysis or project, updated a package might not be desirable.

**Tools → Check for Package Updates** → Select and update
![](https://r.kellogg.northwestern.edu/images/software_update_packages.png)

**OR**

![](https://media.geeksforgeeks.org/wp-content/uploads/20240109145522/update-package-GFG-(1).jpg)

**OR**

Use:

- `update.packages(ask=FALSE)`
- `install.packages("package_name")` 

Set the dependencies argument to `TRUE` for installing the package "Suggests" (default is to install "Depends", "Imports", and "LinkingTo") 

## Data Types in R {.pattern-grid}

**Fundamental Data Types**

- In R, variables can be stored as several types of data
- Different data types can do different things

**Data Types We Might Use**

| Data Type| Example | Use |
|---------|---------|---------|
| numeric | 120, 34.2 | blood pressures, bmi | 
| integer | 15, 26, 0003 | steps, number of siblings, participant ID |
| character (string) | placebo, tall | randomization arm, category | 
| logical (boolean) | TRUE, FALSE | survival, presence of health condition |

. . . 

::: {.code-box}

```{r}
#| echo: true

# Numeric data: BMI
bmi <- 24.8
class(bmi)

# Integer data: Participant ID
id <- 0003L
class(id)

# Character data: randomization group
treatment_arm <- "placebo"
class(treatment_arm)

# Logical data: presence of hypertension
has_hypertension <- FALSE
class(has_hypertension)
```

:::

## Why Data Types Matter in R

- Knowing your data types helps prevent bugs and weird results
- Functions behave differently depending on type
- Mistakes often create **errors** (and that’s OK!)

::: {.code-box}

```{r}
#| echo: true
#| error: true

# Numeric vs. character: Addition
num1 <- 5
num1 + 2

num2 <- "5"
num2 + 2

# Logical used in math
x <- TRUE
y <- FALSE
sum(c(x, y, TRUE))

# Sorting: numeric vs. character
ages <- c(15, 9, 2)
sort(ages)

as_char <- as.character(ages)
sort(as_char)

# Missing Data
# Numeric NA
num_values <- c(100, NA, 200)
mean(num_values)
mean(num_values, na.rm = TRUE)

# Logical NA
logical_values <- c(TRUE, NA, FALSE)
sum(logical_values)
sum(logical_values, na.rm = TRUE)

# Character NA
char_values <- c("yes", NA, "no")
paste("Answer:", char_values)

```

:::

## Vectors in R

- A **vector** is the most basic data structure in R.
- Vectors are **everywhere** in R — for example, each column in a data frame is a vector.
- It is a sequence of values that are **all the same data type** (if not, R will force it to be)

::: {.code-box}

```{r}
#| echo: true
v1 <- c(1:5)
is.numeric(v1)

v2 <- c("cat", "house", "bunny")
is.character(v2)

v3 <- c(v1, v2)
v3
is.character(v3)

```

:::

## Factor

- A factor is a type of vector for categorical data
- Used when there is an order or levels to a variable (i.e "short", "medium", "tall")
- Responds differently to certain functions 

::: {.code-box}

```{r}
#| echo: true
bloodtype_vector <- c("A", "B", "AB", "O")
summary(bloodtype_vector)

bloodtype_factor <- factor(bloodtype_vector)
summary(bloodtype_factor)

height_vector <- c("tall", "short", "medium", "extra tall", "very short")
sort(height_vector)

height_factor <- factor(
  height_vector,
  ordered = TRUE,
  levels = c("very short", "short", "medium", "tall", "extra tall")
)
sort(height_factor)

```

:::

## Lists

- A **list** can hold elements of different types and lengths (unlike a vector)
- Useful for storing models, results, or datasets together.

```{r}

#| echo: true
my_list <- list(
  name = "Bill",
  age = 35,
  scores = c(92, 87, 95),
  passed = TRUE
)
my_list

```

## Data Structures 

**What is a Data Frame?**

- The basic R structure for storing tabular data
- Built into base R
- Converts strings to factors by default (unless told not to)
- Can sometimes change column types automatically
- Allows **partial matching** of column names (can cause subtle bugs)

**What is a Tibble?**

- A tibble is a data frame (with a modern twist!)
- Part of the **tidyverse**
- Never converts strings to factors, never changes variable names, never creates row names 
- Prints cleaner summaries (only first 10 rows and columns shown)
- Better handling of large or complex data
- **Does NOT allow partial matching** — safer and more predictable  


**Partial Matching Example:**

Sometimes, base R data frames will let you access columns by partially matching the name — which can lead to silent errors.

Tibbles require **exact column names**, preventing this problem.

::: {.code-box}

```{r}
#| echo: true
#| error: true
library(tibble)

df1 <- data.frame(experiment_group = c("control", "treatment"))
df1$experiment
tb1 <- tibble(experiment_group = c("control", "treatment"))
tb1$experiment

# Example where partial matching can cause bugs:
df <- data.frame(
  age = c(25, 30, 45),
  average_height = c(55, 62, 50)
)
df$grad_age <- df$ave + 5
print(df)


tb <- tibble(
  age = c(25, 30, 45),
  average_height = c(55, 62, 50)
)
tb$grad_age <- tb$ave + 5

# Create and print normal data frame and tibble for comparison
df3 <- data.frame(id = 1:24, name = rep(c("Ann", "Ben", "Cam"), 8))
class(df3)
df3

tb3 <- tibble(id = 1:24, name = rep(c("Ann", "Ben", "Cam"), 8))
class(tb3)
tb3

```

:::

## GitHub and CRAN

| Source  | Description | When to Use | Install With |
|---------|-------------|-------------|--------------|
| **CRAN** | Official R package repository | Most stable and tested version | `install.packages("pkgname")` |
| **GitHub** | Developer’s source code (often in progress) | Get latest features or unreleased updates | `devtools::install_github("user/pkgname")` |

> Think of **CRAN** like the **App Store** — safe, reviewed, and stable.  
> Think of **GitHub** like the **developer’s lab** — early access, but maybe still being tested.

*Install from CRAN*
install.packages("ggplot2")

*Install from GitHub*
install.packages("devtools")
devtools::install_github("bhelsel/RLAB")

**GitHub packages may require additional setup or dependencies.**





